// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: iquora.proto
#ifndef GRPC_iquora_2eproto__INCLUDED
#define GRPC_iquora_2eproto__INCLUDED

#include "iquora.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace iquora {

class StateStore final {
 public:
  static constexpr char const* service_full_name() {
    return "iquora.StateStore";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Get(::grpc::ClientContext* context, const ::iquora::GetRequest& request, ::iquora::GetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::iquora::GetResponse>> AsyncGet(::grpc::ClientContext* context, const ::iquora::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::iquora::GetResponse>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::iquora::GetResponse>> PrepareAsyncGet(::grpc::ClientContext* context, const ::iquora::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::iquora::GetResponse>>(PrepareAsyncGetRaw(context, request, cq));
    }
    virtual ::grpc::Status Set(::grpc::ClientContext* context, const ::iquora::SetRequest& request, ::iquora::SetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::iquora::SetResponse>> AsyncSet(::grpc::ClientContext* context, const ::iquora::SetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::iquora::SetResponse>>(AsyncSetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::iquora::SetResponse>> PrepareAsyncSet(::grpc::ClientContext* context, const ::iquora::SetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::iquora::SetResponse>>(PrepareAsyncSetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::iquora::SubscribeResponse>> Subscribe(::grpc::ClientContext* context, const ::iquora::SubscribeRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::iquora::SubscribeResponse>>(SubscribeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::iquora::SubscribeResponse>> AsyncSubscribe(::grpc::ClientContext* context, const ::iquora::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::iquora::SubscribeResponse>>(AsyncSubscribeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::iquora::SubscribeResponse>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::iquora::SubscribeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::iquora::SubscribeResponse>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    virtual ::grpc::Status SpawnActor(::grpc::ClientContext* context, const ::iquora::SpawnActorRequest& request, ::iquora::SpawnActorResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::iquora::SpawnActorResponse>> AsyncSpawnActor(::grpc::ClientContext* context, const ::iquora::SpawnActorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::iquora::SpawnActorResponse>>(AsyncSpawnActorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::iquora::SpawnActorResponse>> PrepareAsyncSpawnActor(::grpc::ClientContext* context, const ::iquora::SpawnActorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::iquora::SpawnActorResponse>>(PrepareAsyncSpawnActorRaw(context, request, cq));
    }
    virtual ::grpc::Status TerminateActor(::grpc::ClientContext* context, const ::iquora::TerminateActorRequest& request, ::iquora::TerminateActorResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::iquora::TerminateActorResponse>> AsyncTerminateActor(::grpc::ClientContext* context, const ::iquora::TerminateActorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::iquora::TerminateActorResponse>>(AsyncTerminateActorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::iquora::TerminateActorResponse>> PrepareAsyncTerminateActor(::grpc::ClientContext* context, const ::iquora::TerminateActorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::iquora::TerminateActorResponse>>(PrepareAsyncTerminateActorRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Get(::grpc::ClientContext* context, const ::iquora::GetRequest* request, ::iquora::GetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Get(::grpc::ClientContext* context, const ::iquora::GetRequest* request, ::iquora::GetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Set(::grpc::ClientContext* context, const ::iquora::SetRequest* request, ::iquora::SetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Set(::grpc::ClientContext* context, const ::iquora::SetRequest* request, ::iquora::SetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Subscribe(::grpc::ClientContext* context, const ::iquora::SubscribeRequest* request, ::grpc::ClientReadReactor< ::iquora::SubscribeResponse>* reactor) = 0;
      virtual void SpawnActor(::grpc::ClientContext* context, const ::iquora::SpawnActorRequest* request, ::iquora::SpawnActorResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SpawnActor(::grpc::ClientContext* context, const ::iquora::SpawnActorRequest* request, ::iquora::SpawnActorResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void TerminateActor(::grpc::ClientContext* context, const ::iquora::TerminateActorRequest* request, ::iquora::TerminateActorResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TerminateActor(::grpc::ClientContext* context, const ::iquora::TerminateActorRequest* request, ::iquora::TerminateActorResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::iquora::GetResponse>* AsyncGetRaw(::grpc::ClientContext* context, const ::iquora::GetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::iquora::GetResponse>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::iquora::GetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::iquora::SetResponse>* AsyncSetRaw(::grpc::ClientContext* context, const ::iquora::SetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::iquora::SetResponse>* PrepareAsyncSetRaw(::grpc::ClientContext* context, const ::iquora::SetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::iquora::SubscribeResponse>* SubscribeRaw(::grpc::ClientContext* context, const ::iquora::SubscribeRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::iquora::SubscribeResponse>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::iquora::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::iquora::SubscribeResponse>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::iquora::SubscribeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::iquora::SpawnActorResponse>* AsyncSpawnActorRaw(::grpc::ClientContext* context, const ::iquora::SpawnActorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::iquora::SpawnActorResponse>* PrepareAsyncSpawnActorRaw(::grpc::ClientContext* context, const ::iquora::SpawnActorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::iquora::TerminateActorResponse>* AsyncTerminateActorRaw(::grpc::ClientContext* context, const ::iquora::TerminateActorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::iquora::TerminateActorResponse>* PrepareAsyncTerminateActorRaw(::grpc::ClientContext* context, const ::iquora::TerminateActorRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Get(::grpc::ClientContext* context, const ::iquora::GetRequest& request, ::iquora::GetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::iquora::GetResponse>> AsyncGet(::grpc::ClientContext* context, const ::iquora::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::iquora::GetResponse>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::iquora::GetResponse>> PrepareAsyncGet(::grpc::ClientContext* context, const ::iquora::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::iquora::GetResponse>>(PrepareAsyncGetRaw(context, request, cq));
    }
    ::grpc::Status Set(::grpc::ClientContext* context, const ::iquora::SetRequest& request, ::iquora::SetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::iquora::SetResponse>> AsyncSet(::grpc::ClientContext* context, const ::iquora::SetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::iquora::SetResponse>>(AsyncSetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::iquora::SetResponse>> PrepareAsyncSet(::grpc::ClientContext* context, const ::iquora::SetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::iquora::SetResponse>>(PrepareAsyncSetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::iquora::SubscribeResponse>> Subscribe(::grpc::ClientContext* context, const ::iquora::SubscribeRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::iquora::SubscribeResponse>>(SubscribeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::iquora::SubscribeResponse>> AsyncSubscribe(::grpc::ClientContext* context, const ::iquora::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::iquora::SubscribeResponse>>(AsyncSubscribeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::iquora::SubscribeResponse>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::iquora::SubscribeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::iquora::SubscribeResponse>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    ::grpc::Status SpawnActor(::grpc::ClientContext* context, const ::iquora::SpawnActorRequest& request, ::iquora::SpawnActorResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::iquora::SpawnActorResponse>> AsyncSpawnActor(::grpc::ClientContext* context, const ::iquora::SpawnActorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::iquora::SpawnActorResponse>>(AsyncSpawnActorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::iquora::SpawnActorResponse>> PrepareAsyncSpawnActor(::grpc::ClientContext* context, const ::iquora::SpawnActorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::iquora::SpawnActorResponse>>(PrepareAsyncSpawnActorRaw(context, request, cq));
    }
    ::grpc::Status TerminateActor(::grpc::ClientContext* context, const ::iquora::TerminateActorRequest& request, ::iquora::TerminateActorResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::iquora::TerminateActorResponse>> AsyncTerminateActor(::grpc::ClientContext* context, const ::iquora::TerminateActorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::iquora::TerminateActorResponse>>(AsyncTerminateActorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::iquora::TerminateActorResponse>> PrepareAsyncTerminateActor(::grpc::ClientContext* context, const ::iquora::TerminateActorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::iquora::TerminateActorResponse>>(PrepareAsyncTerminateActorRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Get(::grpc::ClientContext* context, const ::iquora::GetRequest* request, ::iquora::GetResponse* response, std::function<void(::grpc::Status)>) override;
      void Get(::grpc::ClientContext* context, const ::iquora::GetRequest* request, ::iquora::GetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Set(::grpc::ClientContext* context, const ::iquora::SetRequest* request, ::iquora::SetResponse* response, std::function<void(::grpc::Status)>) override;
      void Set(::grpc::ClientContext* context, const ::iquora::SetRequest* request, ::iquora::SetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Subscribe(::grpc::ClientContext* context, const ::iquora::SubscribeRequest* request, ::grpc::ClientReadReactor< ::iquora::SubscribeResponse>* reactor) override;
      void SpawnActor(::grpc::ClientContext* context, const ::iquora::SpawnActorRequest* request, ::iquora::SpawnActorResponse* response, std::function<void(::grpc::Status)>) override;
      void SpawnActor(::grpc::ClientContext* context, const ::iquora::SpawnActorRequest* request, ::iquora::SpawnActorResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TerminateActor(::grpc::ClientContext* context, const ::iquora::TerminateActorRequest* request, ::iquora::TerminateActorResponse* response, std::function<void(::grpc::Status)>) override;
      void TerminateActor(::grpc::ClientContext* context, const ::iquora::TerminateActorRequest* request, ::iquora::TerminateActorResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::iquora::GetResponse>* AsyncGetRaw(::grpc::ClientContext* context, const ::iquora::GetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::iquora::GetResponse>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::iquora::GetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::iquora::SetResponse>* AsyncSetRaw(::grpc::ClientContext* context, const ::iquora::SetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::iquora::SetResponse>* PrepareAsyncSetRaw(::grpc::ClientContext* context, const ::iquora::SetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::iquora::SubscribeResponse>* SubscribeRaw(::grpc::ClientContext* context, const ::iquora::SubscribeRequest& request) override;
    ::grpc::ClientAsyncReader< ::iquora::SubscribeResponse>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::iquora::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::iquora::SubscribeResponse>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::iquora::SubscribeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::iquora::SpawnActorResponse>* AsyncSpawnActorRaw(::grpc::ClientContext* context, const ::iquora::SpawnActorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::iquora::SpawnActorResponse>* PrepareAsyncSpawnActorRaw(::grpc::ClientContext* context, const ::iquora::SpawnActorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::iquora::TerminateActorResponse>* AsyncTerminateActorRaw(::grpc::ClientContext* context, const ::iquora::TerminateActorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::iquora::TerminateActorResponse>* PrepareAsyncTerminateActorRaw(::grpc::ClientContext* context, const ::iquora::TerminateActorRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Get_;
    const ::grpc::internal::RpcMethod rpcmethod_Set_;
    const ::grpc::internal::RpcMethod rpcmethod_Subscribe_;
    const ::grpc::internal::RpcMethod rpcmethod_SpawnActor_;
    const ::grpc::internal::RpcMethod rpcmethod_TerminateActor_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Get(::grpc::ServerContext* context, const ::iquora::GetRequest* request, ::iquora::GetResponse* response);
    virtual ::grpc::Status Set(::grpc::ServerContext* context, const ::iquora::SetRequest* request, ::iquora::SetResponse* response);
    virtual ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::iquora::SubscribeRequest* request, ::grpc::ServerWriter< ::iquora::SubscribeResponse>* writer);
    virtual ::grpc::Status SpawnActor(::grpc::ServerContext* context, const ::iquora::SpawnActorRequest* request, ::iquora::SpawnActorResponse* response);
    virtual ::grpc::Status TerminateActor(::grpc::ServerContext* context, const ::iquora::TerminateActorRequest* request, ::iquora::TerminateActorResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Get() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::iquora::GetRequest* /*request*/, ::iquora::GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::iquora::GetRequest* request, ::grpc::ServerAsyncResponseWriter< ::iquora::GetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Set : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Set() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Set() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Set(::grpc::ServerContext* /*context*/, const ::iquora::SetRequest* /*request*/, ::iquora::SetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSet(::grpc::ServerContext* context, ::iquora::SetRequest* request, ::grpc::ServerAsyncResponseWriter< ::iquora::SetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Subscribe() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::iquora::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::iquora::SubscribeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::iquora::SubscribeRequest* request, ::grpc::ServerAsyncWriter< ::iquora::SubscribeResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SpawnActor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SpawnActor() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SpawnActor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpawnActor(::grpc::ServerContext* /*context*/, const ::iquora::SpawnActorRequest* /*request*/, ::iquora::SpawnActorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpawnActor(::grpc::ServerContext* context, ::iquora::SpawnActorRequest* request, ::grpc::ServerAsyncResponseWriter< ::iquora::SpawnActorResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TerminateActor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TerminateActor() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_TerminateActor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TerminateActor(::grpc::ServerContext* /*context*/, const ::iquora::TerminateActorRequest* /*request*/, ::iquora::TerminateActorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTerminateActor(::grpc::ServerContext* context, ::iquora::TerminateActorRequest* request, ::grpc::ServerAsyncResponseWriter< ::iquora::TerminateActorResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Get<WithAsyncMethod_Set<WithAsyncMethod_Subscribe<WithAsyncMethod_SpawnActor<WithAsyncMethod_TerminateActor<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Get() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::iquora::GetRequest, ::iquora::GetResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::iquora::GetRequest* request, ::iquora::GetResponse* response) { return this->Get(context, request, response); }));}
    void SetMessageAllocatorFor_Get(
        ::grpc::MessageAllocator< ::iquora::GetRequest, ::iquora::GetResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::iquora::GetRequest, ::iquora::GetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::iquora::GetRequest* /*request*/, ::iquora::GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::iquora::GetRequest* /*request*/, ::iquora::GetResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Set : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Set() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::iquora::SetRequest, ::iquora::SetResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::iquora::SetRequest* request, ::iquora::SetResponse* response) { return this->Set(context, request, response); }));}
    void SetMessageAllocatorFor_Set(
        ::grpc::MessageAllocator< ::iquora::SetRequest, ::iquora::SetResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::iquora::SetRequest, ::iquora::SetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Set() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Set(::grpc::ServerContext* /*context*/, const ::iquora::SetRequest* /*request*/, ::iquora::SetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Set(
      ::grpc::CallbackServerContext* /*context*/, const ::iquora::SetRequest* /*request*/, ::iquora::SetResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Subscribe() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::iquora::SubscribeRequest, ::iquora::SubscribeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::iquora::SubscribeRequest* request) { return this->Subscribe(context, request); }));
    }
    ~WithCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::iquora::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::iquora::SubscribeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::iquora::SubscribeResponse>* Subscribe(
      ::grpc::CallbackServerContext* /*context*/, const ::iquora::SubscribeRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SpawnActor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SpawnActor() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::iquora::SpawnActorRequest, ::iquora::SpawnActorResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::iquora::SpawnActorRequest* request, ::iquora::SpawnActorResponse* response) { return this->SpawnActor(context, request, response); }));}
    void SetMessageAllocatorFor_SpawnActor(
        ::grpc::MessageAllocator< ::iquora::SpawnActorRequest, ::iquora::SpawnActorResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::iquora::SpawnActorRequest, ::iquora::SpawnActorResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SpawnActor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpawnActor(::grpc::ServerContext* /*context*/, const ::iquora::SpawnActorRequest* /*request*/, ::iquora::SpawnActorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SpawnActor(
      ::grpc::CallbackServerContext* /*context*/, const ::iquora::SpawnActorRequest* /*request*/, ::iquora::SpawnActorResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TerminateActor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TerminateActor() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::iquora::TerminateActorRequest, ::iquora::TerminateActorResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::iquora::TerminateActorRequest* request, ::iquora::TerminateActorResponse* response) { return this->TerminateActor(context, request, response); }));}
    void SetMessageAllocatorFor_TerminateActor(
        ::grpc::MessageAllocator< ::iquora::TerminateActorRequest, ::iquora::TerminateActorResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::iquora::TerminateActorRequest, ::iquora::TerminateActorResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TerminateActor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TerminateActor(::grpc::ServerContext* /*context*/, const ::iquora::TerminateActorRequest* /*request*/, ::iquora::TerminateActorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TerminateActor(
      ::grpc::CallbackServerContext* /*context*/, const ::iquora::TerminateActorRequest* /*request*/, ::iquora::TerminateActorResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Get<WithCallbackMethod_Set<WithCallbackMethod_Subscribe<WithCallbackMethod_SpawnActor<WithCallbackMethod_TerminateActor<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Get() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::iquora::GetRequest* /*request*/, ::iquora::GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Set : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Set() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Set() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Set(::grpc::ServerContext* /*context*/, const ::iquora::SetRequest* /*request*/, ::iquora::SetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Subscribe() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::iquora::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::iquora::SubscribeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SpawnActor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SpawnActor() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SpawnActor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpawnActor(::grpc::ServerContext* /*context*/, const ::iquora::SpawnActorRequest* /*request*/, ::iquora::SpawnActorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TerminateActor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TerminateActor() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_TerminateActor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TerminateActor(::grpc::ServerContext* /*context*/, const ::iquora::TerminateActorRequest* /*request*/, ::iquora::TerminateActorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Get() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::iquora::GetRequest* /*request*/, ::iquora::GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Set : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Set() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Set() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Set(::grpc::ServerContext* /*context*/, const ::iquora::SetRequest* /*request*/, ::iquora::SetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Subscribe() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::iquora::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::iquora::SubscribeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SpawnActor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SpawnActor() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SpawnActor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpawnActor(::grpc::ServerContext* /*context*/, const ::iquora::SpawnActorRequest* /*request*/, ::iquora::SpawnActorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpawnActor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TerminateActor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TerminateActor() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_TerminateActor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TerminateActor(::grpc::ServerContext* /*context*/, const ::iquora::TerminateActorRequest* /*request*/, ::iquora::TerminateActorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTerminateActor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Get() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Get(context, request, response); }));
    }
    ~WithRawCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::iquora::GetRequest* /*request*/, ::iquora::GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Set : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Set() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Set(context, request, response); }));
    }
    ~WithRawCallbackMethod_Set() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Set(::grpc::ServerContext* /*context*/, const ::iquora::SetRequest* /*request*/, ::iquora::SetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Set(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Subscribe() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->Subscribe(context, request); }));
    }
    ~WithRawCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::iquora::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::iquora::SubscribeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Subscribe(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SpawnActor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SpawnActor() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SpawnActor(context, request, response); }));
    }
    ~WithRawCallbackMethod_SpawnActor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpawnActor(::grpc::ServerContext* /*context*/, const ::iquora::SpawnActorRequest* /*request*/, ::iquora::SpawnActorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SpawnActor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TerminateActor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TerminateActor() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TerminateActor(context, request, response); }));
    }
    ~WithRawCallbackMethod_TerminateActor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TerminateActor(::grpc::ServerContext* /*context*/, const ::iquora::TerminateActorRequest* /*request*/, ::iquora::TerminateActorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TerminateActor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Get() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::iquora::GetRequest, ::iquora::GetResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::iquora::GetRequest, ::iquora::GetResponse>* streamer) {
                       return this->StreamedGet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::iquora::GetRequest* /*request*/, ::iquora::GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::iquora::GetRequest,::iquora::GetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Set : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Set() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::iquora::SetRequest, ::iquora::SetResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::iquora::SetRequest, ::iquora::SetResponse>* streamer) {
                       return this->StreamedSet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Set() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Set(::grpc::ServerContext* /*context*/, const ::iquora::SetRequest* /*request*/, ::iquora::SetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::iquora::SetRequest,::iquora::SetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SpawnActor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SpawnActor() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::iquora::SpawnActorRequest, ::iquora::SpawnActorResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::iquora::SpawnActorRequest, ::iquora::SpawnActorResponse>* streamer) {
                       return this->StreamedSpawnActor(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SpawnActor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SpawnActor(::grpc::ServerContext* /*context*/, const ::iquora::SpawnActorRequest* /*request*/, ::iquora::SpawnActorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSpawnActor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::iquora::SpawnActorRequest,::iquora::SpawnActorResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TerminateActor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TerminateActor() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::iquora::TerminateActorRequest, ::iquora::TerminateActorResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::iquora::TerminateActorRequest, ::iquora::TerminateActorResponse>* streamer) {
                       return this->StreamedTerminateActor(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TerminateActor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TerminateActor(::grpc::ServerContext* /*context*/, const ::iquora::TerminateActorRequest* /*request*/, ::iquora::TerminateActorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTerminateActor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::iquora::TerminateActorRequest,::iquora::TerminateActorResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_Set<WithStreamedUnaryMethod_SpawnActor<WithStreamedUnaryMethod_TerminateActor<Service > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Subscribe() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::iquora::SubscribeRequest, ::iquora::SubscribeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::iquora::SubscribeRequest, ::iquora::SubscribeResponse>* streamer) {
                       return this->StreamedSubscribe(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::iquora::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::iquora::SubscribeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribe(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::iquora::SubscribeRequest,::iquora::SubscribeResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Subscribe<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_Set<WithSplitStreamingMethod_Subscribe<WithStreamedUnaryMethod_SpawnActor<WithStreamedUnaryMethod_TerminateActor<Service > > > > > StreamedService;
};

}  // namespace iquora


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_iquora_2eproto__INCLUDED
