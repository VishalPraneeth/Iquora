// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: iquora.proto

#include "iquora.pb.h"
#include "iquora.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace iquora {

static const char* StateStore_method_names[] = {
  "/iquora.StateStore/Get",
  "/iquora.StateStore/Set",
  "/iquora.StateStore/Subscribe",
  "/iquora.StateStore/SpawnActor",
  "/iquora.StateStore/TerminateActor",
};

std::unique_ptr< StateStore::Stub> StateStore::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< StateStore::Stub> stub(new StateStore::Stub(channel, options));
  return stub;
}

StateStore::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Get_(StateStore_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Set_(StateStore_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Subscribe_(StateStore_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SpawnActor_(StateStore_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TerminateActor_(StateStore_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status StateStore::Stub::Get(::grpc::ClientContext* context, const ::iquora::GetRequest& request, ::iquora::GetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::iquora::GetRequest, ::iquora::GetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Get_, context, request, response);
}

void StateStore::Stub::async::Get(::grpc::ClientContext* context, const ::iquora::GetRequest* request, ::iquora::GetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::iquora::GetRequest, ::iquora::GetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void StateStore::Stub::async::Get(::grpc::ClientContext* context, const ::iquora::GetRequest* request, ::iquora::GetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::iquora::GetResponse>* StateStore::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::iquora::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::iquora::GetResponse, ::iquora::GetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Get_, context, request);
}

::grpc::ClientAsyncResponseReader< ::iquora::GetResponse>* StateStore::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::iquora::GetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StateStore::Stub::Set(::grpc::ClientContext* context, const ::iquora::SetRequest& request, ::iquora::SetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::iquora::SetRequest, ::iquora::SetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Set_, context, request, response);
}

void StateStore::Stub::async::Set(::grpc::ClientContext* context, const ::iquora::SetRequest* request, ::iquora::SetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::iquora::SetRequest, ::iquora::SetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Set_, context, request, response, std::move(f));
}

void StateStore::Stub::async::Set(::grpc::ClientContext* context, const ::iquora::SetRequest* request, ::iquora::SetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Set_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::iquora::SetResponse>* StateStore::Stub::PrepareAsyncSetRaw(::grpc::ClientContext* context, const ::iquora::SetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::iquora::SetResponse, ::iquora::SetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Set_, context, request);
}

::grpc::ClientAsyncResponseReader< ::iquora::SetResponse>* StateStore::Stub::AsyncSetRaw(::grpc::ClientContext* context, const ::iquora::SetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::iquora::SubscribeResponse>* StateStore::Stub::SubscribeRaw(::grpc::ClientContext* context, const ::iquora::SubscribeRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::iquora::SubscribeResponse>::Create(channel_.get(), rpcmethod_Subscribe_, context, request);
}

void StateStore::Stub::async::Subscribe(::grpc::ClientContext* context, const ::iquora::SubscribeRequest* request, ::grpc::ClientReadReactor< ::iquora::SubscribeResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::iquora::SubscribeResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_Subscribe_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::iquora::SubscribeResponse>* StateStore::Stub::AsyncSubscribeRaw(::grpc::ClientContext* context, const ::iquora::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::iquora::SubscribeResponse>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::iquora::SubscribeResponse>* StateStore::Stub::PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::iquora::SubscribeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::iquora::SubscribeResponse>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, false, nullptr);
}

::grpc::Status StateStore::Stub::SpawnActor(::grpc::ClientContext* context, const ::iquora::SpawnActorRequest& request, ::iquora::SpawnActorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::iquora::SpawnActorRequest, ::iquora::SpawnActorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SpawnActor_, context, request, response);
}

void StateStore::Stub::async::SpawnActor(::grpc::ClientContext* context, const ::iquora::SpawnActorRequest* request, ::iquora::SpawnActorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::iquora::SpawnActorRequest, ::iquora::SpawnActorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SpawnActor_, context, request, response, std::move(f));
}

void StateStore::Stub::async::SpawnActor(::grpc::ClientContext* context, const ::iquora::SpawnActorRequest* request, ::iquora::SpawnActorResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SpawnActor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::iquora::SpawnActorResponse>* StateStore::Stub::PrepareAsyncSpawnActorRaw(::grpc::ClientContext* context, const ::iquora::SpawnActorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::iquora::SpawnActorResponse, ::iquora::SpawnActorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SpawnActor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::iquora::SpawnActorResponse>* StateStore::Stub::AsyncSpawnActorRaw(::grpc::ClientContext* context, const ::iquora::SpawnActorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSpawnActorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StateStore::Stub::TerminateActor(::grpc::ClientContext* context, const ::iquora::TerminateActorRequest& request, ::iquora::TerminateActorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::iquora::TerminateActorRequest, ::iquora::TerminateActorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TerminateActor_, context, request, response);
}

void StateStore::Stub::async::TerminateActor(::grpc::ClientContext* context, const ::iquora::TerminateActorRequest* request, ::iquora::TerminateActorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::iquora::TerminateActorRequest, ::iquora::TerminateActorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TerminateActor_, context, request, response, std::move(f));
}

void StateStore::Stub::async::TerminateActor(::grpc::ClientContext* context, const ::iquora::TerminateActorRequest* request, ::iquora::TerminateActorResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TerminateActor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::iquora::TerminateActorResponse>* StateStore::Stub::PrepareAsyncTerminateActorRaw(::grpc::ClientContext* context, const ::iquora::TerminateActorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::iquora::TerminateActorResponse, ::iquora::TerminateActorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TerminateActor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::iquora::TerminateActorResponse>* StateStore::Stub::AsyncTerminateActorRaw(::grpc::ClientContext* context, const ::iquora::TerminateActorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTerminateActorRaw(context, request, cq);
  result->StartCall();
  return result;
}

StateStore::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StateStore_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StateStore::Service, ::iquora::GetRequest, ::iquora::GetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StateStore::Service* service,
             ::grpc::ServerContext* ctx,
             const ::iquora::GetRequest* req,
             ::iquora::GetResponse* resp) {
               return service->Get(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StateStore_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StateStore::Service, ::iquora::SetRequest, ::iquora::SetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StateStore::Service* service,
             ::grpc::ServerContext* ctx,
             const ::iquora::SetRequest* req,
             ::iquora::SetResponse* resp) {
               return service->Set(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StateStore_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< StateStore::Service, ::iquora::SubscribeRequest, ::iquora::SubscribeResponse>(
          [](StateStore::Service* service,
             ::grpc::ServerContext* ctx,
             const ::iquora::SubscribeRequest* req,
             ::grpc::ServerWriter<::iquora::SubscribeResponse>* writer) {
               return service->Subscribe(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StateStore_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StateStore::Service, ::iquora::SpawnActorRequest, ::iquora::SpawnActorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StateStore::Service* service,
             ::grpc::ServerContext* ctx,
             const ::iquora::SpawnActorRequest* req,
             ::iquora::SpawnActorResponse* resp) {
               return service->SpawnActor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StateStore_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StateStore::Service, ::iquora::TerminateActorRequest, ::iquora::TerminateActorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StateStore::Service* service,
             ::grpc::ServerContext* ctx,
             const ::iquora::TerminateActorRequest* req,
             ::iquora::TerminateActorResponse* resp) {
               return service->TerminateActor(ctx, req, resp);
             }, this)));
}

StateStore::Service::~Service() {
}

::grpc::Status StateStore::Service::Get(::grpc::ServerContext* context, const ::iquora::GetRequest* request, ::iquora::GetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StateStore::Service::Set(::grpc::ServerContext* context, const ::iquora::SetRequest* request, ::iquora::SetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StateStore::Service::Subscribe(::grpc::ServerContext* context, const ::iquora::SubscribeRequest* request, ::grpc::ServerWriter< ::iquora::SubscribeResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StateStore::Service::SpawnActor(::grpc::ServerContext* context, const ::iquora::SpawnActorRequest* request, ::iquora::SpawnActorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StateStore::Service::TerminateActor(::grpc::ServerContext* context, const ::iquora::TerminateActorRequest* request, ::iquora::TerminateActorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace iquora

